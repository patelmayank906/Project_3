variables
%All of these actions are not the most efficient for this problem.
t=0.1
l=0.1
Ixx1=(t^4)/12
Ixx2=Ixx1
Iyy1=Ixx1
Iyy2=Ixx2
J1=0.95*(Ixx1+Iyy1)
J2=0.95*(Ixx2+Iyy2)


element properties
% Beam format
% E G rho A1     A2       A3   J1 J2 J3 Ixx1 Ixx2 Ixx3 Iyy1 Iyy2 Iyy3
200e9 77.5e9 7860   t^2 (t)^2 J1 J2 Ixx1 Ixx1 Iyy1 Iyy2
%Note that these were defined above. I can use variables in my input file.
% I also used "steel" as a property. WFEM has some of these predefined. 
% Run "units" and type "who" to see variables/values available inside your
% input file

beam2_project3 elements
%node1 node2 node3 pointnum (beam properties number)
1 2 1 1
2 3 1 1
3 4 1 1
4 5 1 1
5 6 1 1
6 7 1 1
7 8 1 1
8 9 1 1
9 10 1 1
10 11 1 1
11 12 1 1
12 13 1 1
13 14 1 1
14 15 1 1
15 16 1 1
16 17 1 1
17 18 1 1
18 19 1 1
19 20 1 1
20 21 1 1
21 22 1 1
22 23 1 1
23 24 1 1
24 25 1 1
25 26 1 1
26 27 1 1
27 28 1 1
28 29 1 1
29 30 1 1
30 31 1 1
31 32 1 1
32 33 1 1
33 34 1 1
34 35 1 1
35 36 1 1
36 37 1 1
37 38 1 1
38 39 1 1
39 40 1 1 
40 41 1 1
41 42 1 1
42 43 1 1
43 44 1 1
44 45 1 1
45 46 1 1
46 47 1 1
47 48 1 1
48 49 1 1
49 50 1 1
50 51 1 1


nodes
% I can include comment lines
% node num, x y z, Node number isn't ever stored in nodes matrix
1 0 0 0 
2 0 l 0
3 0 2*l 0
4 0 3*l 0 
5 0 4*l 0
6 0 5*l 0
7 0 6*l 0
8 0 7*l 0
9 0 8*l 0
10 0 9*l 0
11 0 10*l 0
12 0 11*l 0
13 0 12*l 0
14 0 13*l 0
15 0 14*l 0
16 0 15*l 0
17 0 16*l 0
18 0 17*l 0
19 0 18*l 0
20 0 19*l 0
21 0 20*l 0
22 0 21*l 0
23 0 22*l 0
24 0 23*l 0 
25 0 24*l 0
26 0 25*l 0
27 0 26*l 0
28 0 27*l 0
29 0 28*l 0
30 0 29*l 0
31 0 30*l 0
32 l 30*l 0
33 2*l 30*l 0
34 3*l 30*l 0
35 4*l 30*l 0
36 5*l 30*l 0
37 6*l 30*l 0
38 7*l 30*l 0
39 8*l 30*l 0
40 9*l 30*l 0
41 10*l 30*l 0
42 11*l 30*l 0
43 12*l 30*l 0
44 13*l 30*l 0
45 14*l 30*l 0
46 15*l 30*l 0
47 16*l 30*l 0
48 17*l 30*l 0
49 18*l 30*l 0
50 19*l 30*l 0
51 20*l 30*l 0

% need to figure out what this block is for
points
1 1 1 1

fix pin
1 0 0 1


fix surfaceball
51 0 1 0
51 0 0 1
2 0 0 1 
3 0 0 1
4 0 0 1
5 0 0 1 
6 0 0 1
7 0 0 1
8 0 0 1
9 0 0 1
10 0 0 1
11 0 0 1
12 0 0 1 
13 0 0 1
14 0 0 1
15 0 0 1 
16 0 0 1
17 0 0 1
18 0 0 1
19 0 0 1
20 0 0 1
21 0 0 1
22 0 0 1 
23 0 0 1
24 0 0 1
25 0 0 1 
26 0 0 1
27 0 0 1
28 0 0 1
29 0 0 1
30 0 0 1
31 0 0 1
32 0 0 1 
33 0 0 1
34 0 0 1
35 0 0 1 
36 0 0 1
37 0 0 1
38 0 0 1
39 0 0 1
40 0 0 1
41 0 0 1
42 0 0 1 
43 0 0 1
44 0 0 1
45 0 0 1 
46 0 0 1
47 0 0 1
48 0 0 1
49 0 0 1
50 0 0 1

load
51 1 10000

actions
modalanalysis
who
fs %dump sorted natural frequencies to the screen
% The stuff inside actions is simply executed at the wfem prompt. Any
% Matlab command can also be executed here. For example, you could double
% the mass matrix then do another modal analysis. 
% This will display natural frequencies and prompt for mode shape display
%if uncommented
%modalreview
%sold=fs %Let's store them for later comparison
%M=M/4; %Dividing M by 4 should double the natural frequencies
%fs=[]; % WFEM won't run another modal analysis unless I force it to 
%It's smart enough to know that it has already been done, so I need to 
%clear the results to it is forced to regenerate them with another
%modalanalysis.
modalanalysis
disp('Natural Frequencies in KHz')
fprintf('%7.3f %7.3f\n',[fsold'; fs'])
disp('See, the natural frequency doubled as expected') % I wrote this out 
%to the output for the user to read after execution.
% Uncommenting this line will cause an exit from WFEM immediately after 
% execution
%end
%Let's do static analysis
staticanalysis
plotdeformed
%Here are the displacements, X
X

